# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/development/cicd/templates/
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:
  - build
  - scan
  - release

variables:
  DOCKER_IMAGE: $CI_REGISTRY_IMAGE
  DOCKER_TAG: $CI_COMMIT_SHA
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
  GIT_DEPTH: "0"

cache:
  key: "${CI_JOB_NAME}"
  paths:
    - .sonar/cache

build-test-job:
  image: docker:latest
  services:
    - docker:dind
    - redis:latest
  stage: build
  script:
    - docker compose up -d
    - docker build --target test -t $CI_REGISTRY_IMAGE:test .
    - docker run -v sqlite-data:/data $CI_REGISTRY_IMAGE:test
    - docker create --name temp $CI_REGISTRY_IMAGE:test
    - docker cp temp:/src/cobertura.xml cobertura.xml || true
    - docker rm temp
    - docker compose down 
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: cobertura.xml
    when: always


sonarcloud-scan-job:
  image: mcr.microsoft.com/dotnet/sdk:9.0
  stage: scan
  dependencies:
    - build-test-job
  script:
    - apt-get update && apt-get install -y openjdk-17-jre-headless
    - export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
    - dotnet tool install --global dotnet-sonarscanner
    - export PATH="$PATH:/root/.dotnet/tools"
    - dotnet sonarscanner begin /k:"pdfcloner-api" /o:"pdfcloner-lab"
    - dotnet build -c Release
    - dotnet sonarscanner end
  artifacts:
    when: on_success

docker-release-job:
  image: docker:latest
  services: [docker:dind]
  stage: release
  script:
  - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
  - docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} -t ${DOCKER_IMAGE}:latest .
  - docker push ${DOCKER_IMAGE}:${DOCKER_TAG}
  - docker push ${DOCKER_IMAGE}:latest
  artifacts:
    when: on_success